NS SharpGLTF.Animations { CLASS AnimatableProperty<T> { METHOD GetValueAt T (String, Single) } }
NS SharpGLTF.Animations { CLASS AnimatableProperty<T> { METHOD RemoveTrack Void (String) } }
NS SharpGLTF.Animations { CLASS AnimatableProperty<T> { METHOD SetTrack Void (String, ICurveSampler<T>) } }
NS SharpGLTF.Animations { CLASS AnimatableProperty<T> { METHOD UseTrackBuilder CurveBuilder<T> (String) } }
NS SharpGLTF.Animations { CLASS AnimatableProperty<T> { METHOD:GET IsAnimated Boolean } }
NS SharpGLTF.Animations { CLASS AnimatableProperty<T> { METHOD:GET Tracks IReadOnlyDictionary<String,ICurveSampler<T>> } }
NS SharpGLTF.Animations { CLASS AnimatableProperty<T> { METHOD:GET Value T } }
NS SharpGLTF.Animations { CLASS AnimatableProperty<T> { METHOD:SET Value T } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD Clear Void () } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD FindSample ValueTuple<_CurveNode<T>,_CurveNode<T>,Single> (Single) } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD RemoveKey Void (Single) } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD SetCurve Void (ICurveSampler<T>) } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD SetIncomingTangent Void (Single, T) } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD SetOutgoingTangent Void (Single, T) } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD SetPoint Void (Single, T, Boolean=True) } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD WithIncomingTangent CurveBuilder<T> (Single, params Single[]) } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD WithIncomingTangent CurveBuilder<T> (Single, T) } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD WithOutgoingTangent CurveBuilder<T> (Single, params Single[]) } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD WithOutgoingTangent CurveBuilder<T> (Single, T) } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD WithPoint CurveBuilder<T> (Single, params Single[]) } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD WithPoint CurveBuilder<T> (Single, T, Boolean=True) } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD:ABSTRACT Clone CurveBuilder<T> () } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD:ABSTRACT GetPoint T (Single) } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD:CONSTRUCTOR () } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD:CONSTRUCTOR (CurveBuilder<T>) } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD:GET Keys IReadOnlyCollection<Single> } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD:GET:VIRTUAL MaxDegree Int32 } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD:PROTECTED:ABSTRACT CreateValue T (params Single[]) } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { METHOD:PROTECTED:ABSTRACT GetTangent T (T, T) } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { USING IConvertibleCurve<T> } }
NS SharpGLTF.Animations { CLASS:ABSTRACT CurveBuilder<T> { USING ICurveSampler<T> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvG,TvM,TvS> { METHOD AddMesh Void (MeshBuilder<TMaterial,TvG,TvM,TvS>, Func<TMaterial,TMaterial>, Func<VertexBuilder<TvG,TvM,TvS>,VertexBuilder<TvG,TvM,TvS>>) } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvG,TvM,TvS> { METHOD TransformVertices Void (Func<VertexBuilder<TvG,TvM,TvS>,VertexBuilder<TvG,TvM,TvS>>) } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvG,TvM,TvS> { METHOD UsePrimitive PrimitiveBuilder<TMaterial,TvG,TvM,TvS> (TMaterial, Int32=3) } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvG,TvM,TvS> { METHOD:CONSTRUCTOR (String=null) } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvG,TvM,TvS> { METHOD:GET Primitives IReadOnlyCollection<PrimitiveBuilder<TMaterial,TvG,TvM,TvS>> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvG,TvM,TvS> { METHOD:GET VertexPreprocessor VertexPreprocessor<TvG,TvM,TvS> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvG,TvM,TvS> { METHOD:GET:VIRTUAL Materials IEnumerable<TMaterial> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvG,TvM,TvS> { METHOD:GET:VIRTUAL Name String } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvG,TvM,TvS> { METHOD:SET VertexPreprocessor VertexPreprocessor<TvG,TvM,TvS> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvG,TvM,TvS> { METHOD:SET:VIRTUAL Name String } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvG,TvM,TvS> { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvG,TvM,TvS> { USING IMeshBuilder<TMaterial> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvG,TvM,TvS> { METHOD:CONSTRUCTOR (String=null) } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvG,TvM,TvS> { USING IMeshBuilder<MaterialBuilder> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvG,TvM,TvS> { USING MeshBuilder<MaterialBuilder,TvG,TvM,TvS> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvG,TvM> { METHOD:CONSTRUCTOR (String=null) } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvG,TvM> { USING IMeshBuilder<MaterialBuilder> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvG,TvM> { USING MeshBuilder<MaterialBuilder,TvG,TvM,VertexEmpty> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvG> { METHOD:CONSTRUCTOR (String=null) } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvG> { USING IMeshBuilder<MaterialBuilder> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvG> { USING MeshBuilder<MaterialBuilder,TvG,VertexEmpty,VertexEmpty> } }
NS SharpGLTF.Geometry { CLASS MorphTargetColumns { METHOD IsolateColumns Void () } }
NS SharpGLTF.Geometry { CLASS MorphTargetColumns { METHOD:GET Colors0 IList<Vector4> } }
NS SharpGLTF.Geometry { CLASS MorphTargetColumns { METHOD:GET Normals IList<Vector3> } }
NS SharpGLTF.Geometry { CLASS MorphTargetColumns { METHOD:GET Positions IList<Vector3> } }
NS SharpGLTF.Geometry { CLASS MorphTargetColumns { METHOD:GET Tangents IList<Vector3> } }
NS SharpGLTF.Geometry { CLASS MorphTargetColumns { METHOD:SET Colors0 IList<Vector4> } }
NS SharpGLTF.Geometry { CLASS MorphTargetColumns { METHOD:SET Normals IList<Vector3> } }
NS SharpGLTF.Geometry { CLASS MorphTargetColumns { METHOD:SET Positions IList<Vector3> } }
NS SharpGLTF.Geometry { CLASS MorphTargetColumns { METHOD:SET Tangents IList<Vector3> } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD AddLine ValueTuple<Int32,Int32> (VertexBuilder<TvG,TvM,TvS>, VertexBuilder<TvG,TvM,TvS>) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD AddPoint Int32 (VertexBuilder<TvG,TvM,TvS>) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD AddTriangle ValueTuple<Int32,Int32,Int32> (VertexBuilder<TvG,TvM,TvS>, VertexBuilder<TvG,TvM,TvS>, VertexBuilder<TvG,TvM,TvS>) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD TransformVertices Void (Func<VertexBuilder<TvG,TvM,TvS>,VertexBuilder<TvG,TvM,TvS>>) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD UseVertex Int32 (VertexBuilder<TvG,TvM,TvS>) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD Validate Void () } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD:GET Mesh MeshBuilder<TMaterial,TvG,TvM,TvS> } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD:GET Vertices IReadOnlyList<VertexBuilder<TvG,TvM,TvS>> } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD:GET:VIRTUAL Indices IReadOnlyList<Int32> } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD:GET:VIRTUAL Lines IReadOnlyList<ValueTuple<Int32,Int32>> } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD:GET:VIRTUAL Material TMaterial } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD:GET:VIRTUAL Points IReadOnlyList<Int32> } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD:GET:VIRTUAL Triangles IReadOnlyList<ValueTuple<Int32,Int32,Int32>> } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD:GET:VIRTUAL VertexType Type } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD:GET:VIRTUAL VerticesPerPrimitive Int32 } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD:VIRTUAL AddLine ValueTuple<Int32,Int32> (IVertexBuilder, IVertexBuilder) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD:VIRTUAL AddPoint Int32 (IVertexBuilder) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { METHOD:VIRTUAL AddTriangle ValueTuple<Int32,Int32,Int32> (IVertexBuilder, IVertexBuilder, IVertexBuilder) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { USING IPrimitiveBuilder } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvG,TvM,TvS> { USING IPrimitiveReader<TMaterial> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD AddMorphTarget MorphTargetColumns () } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD ApplyTransform Void (IGeometryTransform) } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD GetCompatibleVertexType Type () } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD GetVertex IVertexBuilder (Type, Int32) } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD GetVertex VertexBuilder<TvG,TvM,TvS> (Int32) } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD GetVertex VertexBuilder<TvG,TvM,VertexEmpty> (Int32) } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD IsolateColumns Void () } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:CONSTRUCTOR () } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:GET Colors0 IList<Vector4> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:GET Colors1 IList<Vector4> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:GET Joints0 IList<Vector4> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:GET Joints1 IList<Vector4> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:GET MorphTargets IReadOnlyList<MorphTargetColumns> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:GET Normals IList<Vector3> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:GET Positions IList<Vector3> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:GET Tangents IList<Vector4> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:GET TexCoords0 IList<Vector2> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:GET TexCoords1 IList<Vector2> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:GET Weights0 IList<Vector4> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:GET Weights1 IList<Vector4> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:SET Colors0 IList<Vector4> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:SET Colors1 IList<Vector4> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:SET Joints0 IList<Vector4> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:SET Joints1 IList<Vector4> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:SET Normals IList<Vector3> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:SET Positions IList<Vector3> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:SET Tangents IList<Vector4> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:SET TexCoords0 IList<Vector2> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:SET TexCoords1 IList<Vector2> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:SET Weights0 IList<Vector4> } }
NS SharpGLTF.Geometry { CLASS VertexBufferColumns { METHOD:SET Weights1 IList<Vector4> } }
NS SharpGLTF.Geometry { INTERFACE IMeshBuilder<TMaterial> { METHOD:ABSTRACT UsePrimitive IPrimitiveBuilder (TMaterial, Int32=3) } }
NS SharpGLTF.Geometry { INTERFACE IMeshBuilder<TMaterial> { METHOD:ABSTRACT Validate Void () } }
NS SharpGLTF.Geometry { INTERFACE IMeshBuilder<TMaterial> { METHOD:GET:ABSTRACT Materials IEnumerable<TMaterial> } }
NS SharpGLTF.Geometry { INTERFACE IMeshBuilder<TMaterial> { METHOD:GET:ABSTRACT Name String } }
NS SharpGLTF.Geometry { INTERFACE IMeshBuilder<TMaterial> { METHOD:GET:ABSTRACT Primitives IReadOnlyCollection<IPrimitiveReader<TMaterial>> } }
NS SharpGLTF.Geometry { INTERFACE IMeshBuilder<TMaterial> { METHOD:SET:ABSTRACT Name String } }
NS SharpGLTF.Geometry { INTERFACE IPrimitiveBuilder { METHOD:ABSTRACT AddLine ValueTuple<Int32,Int32> (IVertexBuilder, IVertexBuilder) } }
NS SharpGLTF.Geometry { INTERFACE IPrimitiveBuilder { METHOD:ABSTRACT AddPoint Int32 (IVertexBuilder) } }
NS SharpGLTF.Geometry { INTERFACE IPrimitiveBuilder { METHOD:ABSTRACT AddTriangle ValueTuple<Int32,Int32,Int32> (IVertexBuilder, IVertexBuilder, IVertexBuilder) } }
NS SharpGLTF.Geometry { INTERFACE IPrimitiveBuilder { METHOD:GET:ABSTRACT VertexType Type } }
NS SharpGLTF.Geometry { INTERFACE IPrimitiveReader<TMaterial> { METHOD:GET:ABSTRACT Indices IReadOnlyList<Int32> } }
NS SharpGLTF.Geometry { INTERFACE IPrimitiveReader<TMaterial> { METHOD:GET:ABSTRACT Lines IReadOnlyList<ValueTuple<Int32,Int32>> } }
NS SharpGLTF.Geometry { INTERFACE IPrimitiveReader<TMaterial> { METHOD:GET:ABSTRACT Material TMaterial } }
NS SharpGLTF.Geometry { INTERFACE IPrimitiveReader<TMaterial> { METHOD:GET:ABSTRACT Points IReadOnlyList<Int32> } }
NS SharpGLTF.Geometry { INTERFACE IPrimitiveReader<TMaterial> { METHOD:GET:ABSTRACT Triangles IReadOnlyList<ValueTuple<Int32,Int32,Int32>> } }
NS SharpGLTF.Geometry { INTERFACE IPrimitiveReader<TMaterial> { METHOD:GET:ABSTRACT Vertices IReadOnlyList<IVertexBuilder> } }
NS SharpGLTF.Geometry { INTERFACE IPrimitiveReader<TMaterial> { METHOD:GET:ABSTRACT VerticesPerPrimitive Int32 } }
NS SharpGLTF.Geometry { INTERFACE IVertexBuilder { METHOD:ABSTRACT ConvertTo VertexBuilder<TvPP,TvMM,TvSS> () } }
NS SharpGLTF.Geometry { INTERFACE IVertexBuilder { METHOD:ABSTRACT GetGeometry IVertexGeometry () } }
NS SharpGLTF.Geometry { INTERFACE IVertexBuilder { METHOD:ABSTRACT GetMaterial IVertexMaterial () } }
NS SharpGLTF.Geometry { INTERFACE IVertexBuilder { METHOD:ABSTRACT GetSkinning IVertexSkinning () } }
NS SharpGLTF.Geometry { INTERFACE IVertexBuilder { METHOD:ABSTRACT SetGeometry Void (IVertexGeometry) } }
NS SharpGLTF.Geometry { INTERFACE IVertexBuilder { METHOD:ABSTRACT SetMaterial Void (IVertexMaterial) } }
NS SharpGLTF.Geometry { INTERFACE IVertexBuilder { METHOD:ABSTRACT SetSkinning Void (IVertexSkinning) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { FIELD Geometry TvG } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { FIELD Material TvM } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { FIELD Skinning TvS } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD Validate Void () } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD WithGeometry VertexBuilder<TvG,TvM,TvS> (Vector3) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD WithGeometry VertexBuilder<TvG,TvM,TvS> (Vector3, Vector3) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD WithGeometry VertexBuilder<TvG,TvM,TvS> (Vector3, Vector3, Vector4) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD WithMaterial VertexBuilder<TvG,TvM,TvS> (params Vector2[]) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD WithMaterial VertexBuilder<TvG,TvM,TvS> (Vector4, params Vector2[]) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD WithMaterial VertexBuilder<TvG,TvM,TvS> (Vector4, Vector4, params Vector2[]) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD WithSkinning VertexBuilder<TvG,TvM,TvS> (params ValueTuple[]<Int32,Single>) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD:CONSTRUCTOR (TvG) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD:CONSTRUCTOR (TvG, params ValueTuple[]<Int32,Single>) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD:CONSTRUCTOR (TvG, SparseWeight8) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD:CONSTRUCTOR (TvG, TvM) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD:CONSTRUCTOR (TvG, TvM, params ValueTuple[]<Int32,Single>) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD:CONSTRUCTOR (TvG, TvM, SparseWeight8) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD:CONSTRUCTOR (TvG, TvM, TvS) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD:CONSTRUCTOR (TvG, TvS) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD:GET Position Vector3 } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD:SET Position Vector3 } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD:STATIC Create VertexBuilder<TvG,TvM,TvS> (Vector3) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD:STATIC Create VertexBuilder<TvG,TvM,TvS> (Vector3, Vector3) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD:STATIC Create VertexBuilder<TvG,TvM,TvS> (Vector3, Vector3, Vector4) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD:STATIC CreateCompatibleMesh MeshBuilder<TMaterial,TvG,TvM,TvS> (String=null) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD:STATIC CreateCompatibleMesh MeshBuilder<TvG,TvM,TvS> (String=null) } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { METHOD:VIRTUAL ConvertTo VertexBuilder<TvPP,TvMM,TvSS> () } }
NS SharpGLTF.Geometry { STRUCT VertexBuilder<TvG,TvM,TvS> { USING IVertexBuilder } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexAttributeAttribute { METHOD:CONSTRUCTOR (String) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexAttributeAttribute { METHOD:CONSTRUCTOR (String, EncodingType, Boolean) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexAttributeAttribute { METHOD:GET Encoding EncodingType } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexAttributeAttribute { METHOD:GET Name String } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexAttributeAttribute { METHOD:GET Normalized Boolean } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexAttributeAttribute { USING Attribute } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexGeometryPreprocessor<TvG> { METHOD:CONSTRUCTOR (Object, IntPtr) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexGeometryPreprocessor<TvG> { METHOD:VIRTUAL BeginInvoke IAsyncResult (TvG, AsyncCallback, Object) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexGeometryPreprocessor<TvG> { METHOD:VIRTUAL EndInvoke Nullable<TvG> (IAsyncResult) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexGeometryPreprocessor<TvG> { METHOD:VIRTUAL Invoke Nullable<TvG> (TvG) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexGeometryPreprocessor<TvG> { USING Delegate } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexGeometryPreprocessor<TvG> { USING ICloneable } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexGeometryPreprocessor<TvG> { USING ISerializable } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexGeometryPreprocessor<TvG> { USING MulticastDelegate } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexMaterialPreprocessor<TvM> { METHOD:CONSTRUCTOR (Object, IntPtr) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexMaterialPreprocessor<TvM> { METHOD:VIRTUAL BeginInvoke IAsyncResult (TvM, AsyncCallback, Object) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexMaterialPreprocessor<TvM> { METHOD:VIRTUAL EndInvoke Nullable<TvM> (IAsyncResult) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexMaterialPreprocessor<TvM> { METHOD:VIRTUAL Invoke Nullable<TvM> (TvM) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexMaterialPreprocessor<TvM> { USING Delegate } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexMaterialPreprocessor<TvM> { USING ICloneable } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexMaterialPreprocessor<TvM> { USING ISerializable } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexMaterialPreprocessor<TvM> { USING MulticastDelegate } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexPreprocessor<TvG,TvM,TvS> { METHOD Append Void (VertexGeometryPreprocessor<TvG>) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexPreprocessor<TvG,TvM,TvS> { METHOD Append Void (VertexMaterialPreprocessor<TvM>) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexPreprocessor<TvG,TvM,TvS> { METHOD Append Void (VertexSkinningPreprocessor<TvS>) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexPreprocessor<TvG,TvM,TvS> { METHOD Clear Void () } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexPreprocessor<TvG,TvM,TvS> { METHOD PreprocessVertex Boolean (ref VertexBuilder`3) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexPreprocessor<TvG,TvM,TvS> { METHOD SetDebugPreprocessors Void () } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexPreprocessor<TvG,TvM,TvS> { METHOD SetSanitizerPreprocessors Void () } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexPreprocessor<TvG,TvM,TvS> { METHOD:CONSTRUCTOR () } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexSkinningPreprocessor<TvS> { METHOD:CONSTRUCTOR (Object, IntPtr) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexSkinningPreprocessor<TvS> { METHOD:VIRTUAL BeginInvoke IAsyncResult (TvS, AsyncCallback, Object) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexSkinningPreprocessor<TvS> { METHOD:VIRTUAL EndInvoke Nullable<TvS> (IAsyncResult) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexSkinningPreprocessor<TvS> { METHOD:VIRTUAL Invoke Nullable<TvS> (TvS) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexSkinningPreprocessor<TvS> { USING Delegate } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexSkinningPreprocessor<TvS> { USING ICloneable } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexSkinningPreprocessor<TvS> { USING ISerializable } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexSkinningPreprocessor<TvS> { USING MulticastDelegate } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexGeometry { METHOD:ABSTRACT ApplyTransform Void (Matrix4x4) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexGeometry { METHOD:ABSTRACT GetPosition Vector3 () } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexGeometry { METHOD:ABSTRACT SetNormal Void (Vector3) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexGeometry { METHOD:ABSTRACT SetPosition Void (Vector3) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexGeometry { METHOD:ABSTRACT SetTangent Void (Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexGeometry { METHOD:ABSTRACT TryGetNormal Boolean (out Vector3) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexGeometry { METHOD:ABSTRACT TryGetTangent Boolean (out Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexGeometry { METHOD:ABSTRACT Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexMaterial { METHOD:ABSTRACT GetColor Vector4 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexMaterial { METHOD:ABSTRACT GetTexCoord Vector2 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexMaterial { METHOD:ABSTRACT SetColor Void (Int32, Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexMaterial { METHOD:ABSTRACT SetTexCoord Void (Int32, Vector2) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexMaterial { METHOD:ABSTRACT Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexMaterial { METHOD:GET:ABSTRACT MaxColors Int32 } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexMaterial { METHOD:GET:ABSTRACT MaxTextCoords Int32 } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexSkinning { METHOD:ABSTRACT GetJointBinding ValueTuple<Int32,Single> (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexSkinning { METHOD:ABSTRACT GetWeights SparseWeight8 () } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexSkinning { METHOD:ABSTRACT SetJointBinding Void (Int32, Int32, Single) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexSkinning { METHOD:ABSTRACT SetWeights Void (in SparseWeight8) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexSkinning { METHOD:ABSTRACT Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexSkinning { METHOD:GET:ABSTRACT JointsHigh Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexSkinning { METHOD:GET:ABSTRACT JointsLow Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexSkinning { METHOD:GET:ABSTRACT MaxBindings Int32 } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexSkinning { METHOD:GET:ABSTRACT Weightshigh Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexSkinning { METHOD:GET:ABSTRACT WeightsLow Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { FIELD Color Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { METHOD:CONSTRUCTOR (IVertexMaterial) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { METHOD:CONSTRUCTOR (Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { METHOD:GET:VIRTUAL MaxColors Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { METHOD:GET:VIRTUAL MaxTextCoords Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { METHOD:VIRTUAL GetColor Vector4 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { METHOD:VIRTUAL GetTexCoord Vector2 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { USING IVertexMaterial } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { FIELD Color Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { FIELD TexCoord Vector2 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { METHOD:CONSTRUCTOR (IVertexMaterial) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { METHOD:CONSTRUCTOR (Vector4, Vector2) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { METHOD:GET:VIRTUAL MaxColors Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { METHOD:GET:VIRTUAL MaxTextCoords Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { METHOD:VIRTUAL GetColor Vector4 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { METHOD:VIRTUAL GetTexCoord Vector2 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { USING IVertexMaterial } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { FIELD Color Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { FIELD TexCoord0 Vector2 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { FIELD TexCoord1 Vector2 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { METHOD:CONSTRUCTOR (IVertexMaterial) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { METHOD:CONSTRUCTOR (Vector4, Vector2, Vector2) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { METHOD:GET:VIRTUAL MaxColors Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { METHOD:GET:VIRTUAL MaxTextCoords Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { METHOD:VIRTUAL GetColor Vector4 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { METHOD:VIRTUAL GetTexCoord Vector2 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { USING IVertexMaterial } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2 { FIELD Color0 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2 { FIELD Color1 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2 { METHOD:CONSTRUCTOR (IVertexMaterial) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2 { METHOD:CONSTRUCTOR (Vector4, Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2 { METHOD:GET:VIRTUAL MaxColors Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2 { METHOD:GET:VIRTUAL MaxTextCoords Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2 { METHOD:VIRTUAL GetColor Vector4 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2 { METHOD:VIRTUAL GetTexCoord Vector2 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2 { USING IVertexMaterial } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { FIELD Color0 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { FIELD Color1 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { FIELD TexCoord0 Vector2 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { FIELD TexCoord1 Vector2 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { METHOD:CONSTRUCTOR (IVertexMaterial) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { METHOD:CONSTRUCTOR (Vector4, Vector4, Vector2, Vector2) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { METHOD:GET:VIRTUAL MaxColors Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { METHOD:GET:VIRTUAL MaxTextCoords Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { METHOD:VIRTUAL GetColor Vector4 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { METHOD:VIRTUAL GetTexCoord Vector2 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { USING IVertexMaterial } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexEmpty { METHOD SetWeights Void (in SparseWeight8) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexEmpty { METHOD:GET:VIRTUAL MaxBindings Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexEmpty { METHOD:GET:VIRTUAL MaxColors Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexEmpty { METHOD:GET:VIRTUAL MaxTextCoords Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexEmpty { METHOD:VIRTUAL GetWeights SparseWeight8 () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexEmpty { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexEmpty { USING IVertexMaterial } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexEmpty { USING IVertexSkinning } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { FIELD Joints Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { FIELD Weights Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { METHOD InPlaceSort Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { METHOD SetWeights Void (in SparseWeight8) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { METHOD:CONSTRUCTOR (in SparseWeight8) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { METHOD:CONSTRUCTOR (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { METHOD:CONSTRUCTOR (params ValueTuple[]<Int32,Single>) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { METHOD:GET:VIRTUAL MaxBindings Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { METHOD:VIRTUAL GetJointBinding ValueTuple<Int32,Single> (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { METHOD:VIRTUAL GetWeights SparseWeight8 () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { METHOD:VIRTUAL SetJointBinding Void (Int32, Int32, Single) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { USING IVertexSkinning } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { FIELD Joints0 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { FIELD Joints1 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { FIELD Weights0 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { FIELD Weights1 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { METHOD SetWeights Void (in SparseWeight8) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { METHOD:CONSTRUCTOR (in SparseWeight8) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { METHOD:CONSTRUCTOR (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { METHOD:CONSTRUCTOR (params ValueTuple[]<Int32,Single>) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { METHOD:GET:VIRTUAL MaxBindings Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { METHOD:VIRTUAL GetJointBinding ValueTuple<Int32,Single> (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { METHOD:VIRTUAL GetWeights SparseWeight8 () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { METHOD:VIRTUAL SetJointBinding Void (Int32, Int32, Single) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { USING IVertexSkinning } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { FIELD Joints Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { FIELD Weights Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { METHOD InPlaceSort Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { METHOD SetWeights Void (in SparseWeight8) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { METHOD:CONSTRUCTOR (in SparseWeight8) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { METHOD:CONSTRUCTOR (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { METHOD:CONSTRUCTOR (params ValueTuple[]<Int32,Single>) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { METHOD:GET:VIRTUAL MaxBindings Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { METHOD:VIRTUAL GetJointBinding ValueTuple<Int32,Single> (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { METHOD:VIRTUAL GetWeights SparseWeight8 () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { METHOD:VIRTUAL SetJointBinding Void (Int32, Int32, Single) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { USING IVertexSkinning } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { FIELD Joints0 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { FIELD Joints1 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { FIELD Weights0 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { FIELD Weights1 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { METHOD SetWeights Void (in SparseWeight8) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { METHOD:CONSTRUCTOR (in SparseWeight8) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { METHOD:CONSTRUCTOR (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { METHOD:CONSTRUCTOR (params ValueTuple[]<Int32,Single>) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { METHOD:GET SparseWeights SparseWeight8 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { METHOD:GET:VIRTUAL MaxBindings Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { METHOD:VIRTUAL GetJointBinding ValueTuple<Int32,Single> (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { METHOD:VIRTUAL GetWeights SparseWeight8 () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { METHOD:VIRTUAL SetJointBinding Void (Int32, Int32, Single) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { USING IVertexSkinning } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { FIELD Position Vector3 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { METHOD:CONSTRUCTOR (IVertexGeometry) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { METHOD:CONSTRUCTOR (Single, Single, Single) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { METHOD:CONSTRUCTOR (Vector3) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { METHOD:VIRTUAL ApplyTransform Void (Matrix4x4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { METHOD:VIRTUAL GetPosition Vector3 () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { METHOD:VIRTUAL TryGetNormal Boolean (out Vector3) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { METHOD:VIRTUAL TryGetTangent Boolean (out Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { USING IVertexGeometry } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { FIELD Normal Vector3 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { FIELD Position Vector3 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { METHOD:CONSTRUCTOR (IVertexGeometry) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { METHOD:CONSTRUCTOR (Single, Single, Single, Single, Single, Single) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { METHOD:CONSTRUCTOR (Vector3, Vector3) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { METHOD:VIRTUAL ApplyTransform Void (Matrix4x4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { METHOD:VIRTUAL GetPosition Vector3 () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { METHOD:VIRTUAL TryGetNormal Boolean (out Vector3) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { METHOD:VIRTUAL TryGetTangent Boolean (out Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { USING IVertexGeometry } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { FIELD Normal Vector3 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { FIELD Position Vector3 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { FIELD Tangent Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { METHOD:CONSTRUCTOR (IVertexGeometry) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { METHOD:CONSTRUCTOR (Vector3, Vector3, Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { METHOD:VIRTUAL ApplyTransform Void (Matrix4x4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { METHOD:VIRTUAL GetPosition Vector3 () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { METHOD:VIRTUAL TryGetNormal Boolean (out Vector3) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { METHOD:VIRTUAL TryGetTangent Boolean (out Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { USING IVertexGeometry } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { FIELD TexCoord Vector2 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { METHOD:CONSTRUCTOR (IVertexMaterial) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { METHOD:CONSTRUCTOR (Vector2) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { METHOD:GET:VIRTUAL MaxColors Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { METHOD:GET:VIRTUAL MaxTextCoords Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { METHOD:VIRTUAL GetColor Vector4 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { METHOD:VIRTUAL GetTexCoord Vector2 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { USING IVertexMaterial } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture2 { FIELD TexCoord0 Vector2 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture2 { FIELD TexCoord1 Vector2 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture2 { METHOD:CONSTRUCTOR (IVertexMaterial) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture2 { METHOD:CONSTRUCTOR (Vector2, Vector2) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture2 { METHOD:GET:VIRTUAL MaxColors Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture2 { METHOD:GET:VIRTUAL MaxTextCoords Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture2 { METHOD:VIRTUAL GetColor Vector4 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture2 { METHOD:VIRTUAL GetTexCoord Vector2 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture2 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture2 { USING IVertexMaterial } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD RemoveTexture Void () } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD SetDefaultParameter Void () } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD UseTexture TextureBuilder () } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD:GET Key String } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD:GET Parameter Vector4 } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD:GET Texture TextureBuilder } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD:GET:STATIC ContentComparer IEqualityComparer<ChannelBuilder> } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD:SET Parameter Vector4 } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD:STATIC AreEqual Boolean (ChannelBuilder, ChannelBuilder) } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD:STATIC GetContentHashCode Int32 (ChannelBuilder) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { FIELD:CONST SHADERPBRMETALLICROUGHNESS String } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { FIELD:CONST SHADERPBRSPECULARGLOSSINESS String } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { FIELD:CONST SHADERUNLIT String } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD GetChannel ChannelBuilder (KnownChannels) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD GetChannel ChannelBuilder (String) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD UseChannel ChannelBuilder (KnownChannels) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD UseChannel ChannelBuilder (String) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithAlpha MaterialBuilder (AlphaMode=OPAQUE, Single=0,5) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithChannelImage MaterialBuilder (KnownChannels, String) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithChannelImage MaterialBuilder (String, String) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithChannelParam MaterialBuilder (KnownChannels, Vector4) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithChannelParam MaterialBuilder (String, Vector4) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithDoubleSide MaterialBuilder (Boolean) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithEmissive MaterialBuilder (String) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithEmissive MaterialBuilder (String, Vector3) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithEmissive MaterialBuilder (Vector3) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithFallback MaterialBuilder (MaterialBuilder) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithMetallicRoughnessShader MaterialBuilder () } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithNormal MaterialBuilder (String, Single=1) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithOcclusion MaterialBuilder (String, Single=1) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithShader MaterialBuilder (String) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithSpecularGlossinessShader MaterialBuilder () } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithUnlitShader MaterialBuilder () } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:CONSTRUCTOR (String=null) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:GET AlphaCutoff Single } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:GET AlphaMode AlphaMode } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:GET Channels IReadOnlyCollection<ChannelBuilder> } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:GET CompatibilityFallback MaterialBuilder } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:GET DoubleSided Boolean } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:GET Name String } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:GET ShaderStyle String } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:GET:STATIC ContentComparer IEqualityComparer<MaterialBuilder> } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:SET AlphaCutoff Single } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:SET AlphaMode AlphaMode } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:SET CompatibilityFallback MaterialBuilder } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:SET DoubleSided Boolean } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:SET Name String } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:SET ShaderStyle String } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:STATIC AreEqual Boolean (MaterialBuilder, MaterialBuilder) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:STATIC CreateDefault MaterialBuilder () } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:STATIC GetContentHashCode Int32 (MaterialBuilder) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD WithCoordinateSet TextureBuilder (Int32) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD WithFallbackImage TextureBuilder (ArraySegment<Byte>) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD WithFallbackImage TextureBuilder (String) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD WithImage TextureBuilder (ArraySegment<Byte>) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD WithImage TextureBuilder (String) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD WithPrimaryImage TextureBuilder (ArraySegment<Byte>) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD WithPrimaryImage TextureBuilder (String) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD WithSampler TextureBuilder (TextureWrapMode, TextureWrapMode, TextureMipMapFilter=DEFAULT, TextureInterpolationFilter=DEFAULT) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD WithTransform TextureBuilder (Single, Single, Single=1, Single=1, Single=0, Nullable<Int32>=null) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD WithTransform TextureBuilder (Vector2, Vector2, Single=0, Nullable<Int32>=null) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:GET CoordinateSet Int32 } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:GET FallbackImageContent ArraySegment<Byte> } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:GET MagFilter TextureInterpolationFilter } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:GET MinFilter TextureMipMapFilter } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:GET PrimaryImageContent ArraySegment<Byte> } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:GET Transform TextureTransformBuilder } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:GET WrapS TextureWrapMode } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:GET WrapT TextureWrapMode } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:GET:STATIC ContentComparer IEqualityComparer<TextureBuilder> } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:SET CoordinateSet Int32 } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:SET FallbackImageContent ArraySegment<Byte> } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:SET MagFilter TextureInterpolationFilter } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:SET MinFilter TextureMipMapFilter } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:SET PrimaryImageContent ArraySegment<Byte> } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:SET WrapS TextureWrapMode } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:SET WrapT TextureWrapMode } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:STATIC AreEqual Boolean (TextureBuilder, TextureBuilder) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:STATIC GetContentHashCode Int32 (TextureBuilder) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:STATIC IsImage Boolean (ArraySegment<Byte>, String) } }
NS SharpGLTF.Materials { CLASS TextureTransformBuilder { METHOD:GET CoordinateSetOverride Nullable<Int32> } }
NS SharpGLTF.Materials { CLASS TextureTransformBuilder { METHOD:GET Offset Vector2 } }
NS SharpGLTF.Materials { CLASS TextureTransformBuilder { METHOD:GET Rotation Single } }
NS SharpGLTF.Materials { CLASS TextureTransformBuilder { METHOD:GET Scale Vector2 } }
NS SharpGLTF.Materials { CLASS TextureTransformBuilder { METHOD:SET CoordinateSetOverride Nullable<Int32> } }
NS SharpGLTF.Materials { CLASS TextureTransformBuilder { METHOD:SET Offset Vector2 } }
NS SharpGLTF.Materials { CLASS TextureTransformBuilder { METHOD:SET Rotation Single } }
NS SharpGLTF.Materials { CLASS TextureTransformBuilder { METHOD:SET Scale Vector2 } }
NS SharpGLTF.Materials { CLASS TextureTransformBuilder { METHOD:STATIC AreEqual Boolean (TextureTransformBuilder, TextureTransformBuilder) } }
NS SharpGLTF.Materials { ENUM AlphaMode { BLEND=2 } }
NS SharpGLTF.Materials { ENUM AlphaMode { MASK=1 } }
NS SharpGLTF.Materials { ENUM AlphaMode { OPAQUE=0 } }
NS SharpGLTF.Materials { ENUM KnownChannels { BaseColor=3 } }
NS SharpGLTF.Materials { ENUM KnownChannels { Diffuse=5 } }
NS SharpGLTF.Materials { ENUM KnownChannels { Emissive=2 } }
NS SharpGLTF.Materials { ENUM KnownChannels { MetallicRoughness=4 } }
NS SharpGLTF.Materials { ENUM KnownChannels { Normal=0 } }
NS SharpGLTF.Materials { ENUM KnownChannels { Occlusion=1 } }
NS SharpGLTF.Materials { ENUM KnownChannels { SpecularGlossiness=6 } }
NS SharpGLTF.Scenes { CLASS InstanceBuilder { METHOD:GET Content ContentTransformer } }
NS SharpGLTF.Scenes { CLASS InstanceBuilder { METHOD:GET Name String } }
NS SharpGLTF.Scenes { CLASS InstanceBuilder { METHOD:SET Content ContentTransformer } }
NS SharpGLTF.Scenes { CLASS InstanceBuilder { METHOD:SET Name String } }
NS SharpGLTF.Scenes { CLASS InstanceBuilder { USING IOperator<Scene> } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD CreateNode NodeBuilder (String=null) } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD GetLocalTransform AffineTransform (String, Single) } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD GetWorldMatrix Matrix4x4 (String, Single) } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD SetRotationTrack Void (String, ICurveSampler<Quaternion>) } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD SetScaleTrack Void (String, ICurveSampler<Vector3>) } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD SetTranslationTrack Void (String, ICurveSampler<Vector3>) } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD UseRotation AnimatableProperty<Quaternion> () } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD UseRotation CurveBuilder<Quaternion> (String) } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD UseScale AnimatableProperty<Vector3> () } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD UseScale CurveBuilder<Vector3> (String) } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD UseTranslation AnimatableProperty<Vector3> () } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD UseTranslation CurveBuilder<Vector3> (String) } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD WithLocalRotation NodeBuilder (Quaternion) } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD WithLocalScale NodeBuilder (Vector3) } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD WithLocalTranslation NodeBuilder (Vector3) } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:CONSTRUCTOR () } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:CONSTRUCTOR (String) } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:GET HasAnimations Boolean } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:GET LocalMatrix Matrix4x4 } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:GET LocalTransform AffineTransform } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:GET Name String } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:GET Parent NodeBuilder } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:GET Root NodeBuilder } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:GET Rotation AnimatableProperty<Quaternion> } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:GET Scale AnimatableProperty<Vector3> } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:GET Translation AnimatableProperty<Vector3> } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:GET VisualChildren IReadOnlyList<NodeBuilder> } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:GET WorldMatrix Matrix4x4 } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:SET LocalMatrix Matrix4x4 } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:SET LocalTransform AffineTransform } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:SET Name String } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:SET WorldMatrix Matrix4x4 } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:STATIC Flatten IEnumerable<NodeBuilder> (NodeBuilder) } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:STATIC IsValidArmature Boolean (IEnumerable<NodeBuilder>) } }
NS SharpGLTF.Scenes { CLASS NodeBuilder { METHOD:STATIC Rename Void (IEnumerable<NodeBuilder>, String) } }
NS SharpGLTF.Scenes { CLASS NodeTransformer { METHOD:CONSTRUCTOR (IMeshBuilder<MaterialBuilder>, NodeBuilder) } }
NS SharpGLTF.Scenes { CLASS NodeTransformer { METHOD:CONSTRUCTOR (Object, NodeBuilder) } }
NS SharpGLTF.Scenes { CLASS NodeTransformer { METHOD:GET Transform NodeBuilder } }
NS SharpGLTF.Scenes { CLASS NodeTransformer { METHOD:SET Transform NodeBuilder } }
NS SharpGLTF.Scenes { CLASS NodeTransformer { METHOD:VIRTUAL GetArmatureAsset NodeBuilder () } }
NS SharpGLTF.Scenes { CLASS NodeTransformer { USING ContentTransformer } }
NS SharpGLTF.Scenes { CLASS NodeTransformer { USING IOperator<Scene> } }
NS SharpGLTF.Scenes { CLASS SceneBuilder { METHOD AddMesh InstanceBuilder (IMeshBuilder<MaterialBuilder>, Matrix4x4) } }
NS SharpGLTF.Scenes { CLASS SceneBuilder { METHOD AddMesh InstanceBuilder (IMeshBuilder<MaterialBuilder>, NodeBuilder) } }
NS SharpGLTF.Scenes { CLASS SceneBuilder { METHOD AddOrthographicCamera InstanceBuilder (NodeBuilder, Single, Single, Single, Single) } }
NS SharpGLTF.Scenes { CLASS SceneBuilder { METHOD AddPerspectiveCamera InstanceBuilder (NodeBuilder, Nullable<Single>, Single, Single, Single=∞) } }
NS SharpGLTF.Scenes { CLASS SceneBuilder { METHOD AddSkinnedMesh InstanceBuilder (IMeshBuilder<MaterialBuilder>, Matrix4x4, params NodeBuilder[]) } }
NS SharpGLTF.Scenes { CLASS SceneBuilder { METHOD AddSkinnedMesh InstanceBuilder (IMeshBuilder<MaterialBuilder>, params ValueTuple[]<NodeBuilder,Matrix4x4>) } }
NS SharpGLTF.Scenes { CLASS SceneBuilder { METHOD RenameAllNodes Void (String) } }
NS SharpGLTF.Scenes { CLASS SceneBuilder { METHOD ToSchema2 ModelRoot () } }
NS SharpGLTF.Scenes { CLASS SceneBuilder { METHOD:CONSTRUCTOR () } }
NS SharpGLTF.Scenes { CLASS SceneBuilder { METHOD:GET Instances IReadOnlyList<InstanceBuilder> } }
NS SharpGLTF.Scenes { CLASS SkinTransformer { METHOD GetJointBindings ValueTuple[]<NodeBuilder,Matrix4x4> () } }
NS SharpGLTF.Scenes { CLASS SkinTransformer { METHOD GetWorldTransformer IGeometryTransform (String, Single) } }
NS SharpGLTF.Scenes { CLASS SkinTransformer { METHOD:CONSTRUCTOR (IMeshBuilder<MaterialBuilder>, Matrix4x4, NodeBuilder[]) } }
NS SharpGLTF.Scenes { CLASS SkinTransformer { METHOD:CONSTRUCTOR (IMeshBuilder<MaterialBuilder>, ValueTuple[]<NodeBuilder,Matrix4x4>) } }
NS SharpGLTF.Scenes { CLASS SkinTransformer { METHOD:VIRTUAL GetArmatureAsset NodeBuilder () } }
NS SharpGLTF.Scenes { CLASS SkinTransformer { USING ContentTransformer } }
NS SharpGLTF.Scenes { CLASS SkinTransformer { USING IOperator<Scene> } }
NS SharpGLTF.Scenes { CLASS StaticTransformer { METHOD:CONSTRUCTOR (IMeshBuilder<MaterialBuilder>, Matrix4x4) } }
NS SharpGLTF.Scenes { CLASS StaticTransformer { METHOD:CONSTRUCTOR (Object, Matrix4x4) } }
NS SharpGLTF.Scenes { CLASS StaticTransformer { METHOD:GET WorldTransform Matrix4x4 } }
NS SharpGLTF.Scenes { CLASS StaticTransformer { METHOD:SET WorldTransform Matrix4x4 } }
NS SharpGLTF.Scenes { CLASS StaticTransformer { METHOD:VIRTUAL GetArmatureAsset NodeBuilder () } }
NS SharpGLTF.Scenes { CLASS StaticTransformer { USING ContentTransformer } }
NS SharpGLTF.Scenes { CLASS StaticTransformer { USING IOperator<Scene> } }
NS SharpGLTF.Scenes { CLASS:ABSTRACT ContentTransformer { METHOD:ABSTRACT GetArmatureAsset NodeBuilder () } }
NS SharpGLTF.Scenes { CLASS:ABSTRACT ContentTransformer { METHOD:CONSTRUCTOR (IMeshBuilder<MaterialBuilder>) } }
NS SharpGLTF.Scenes { CLASS:ABSTRACT ContentTransformer { METHOD:CONSTRUCTOR (Object) } }
NS SharpGLTF.Scenes { CLASS:ABSTRACT ContentTransformer { METHOD:GET Content Object } }
NS SharpGLTF.Scenes { CLASS:ABSTRACT ContentTransformer { METHOD:VIRTUAL GetGeometryAsset IMeshBuilder<MaterialBuilder> () } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION AddMesh Void (MeshBuilder<TMaterial,TvG,TvM,TvS>, Mesh, Func<Material,TMaterial>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CopyChannelsTo Void (Material, MaterialBuilder, params String[]) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CopyChannelsTo Void (MaterialBuilder, Material, params String[]) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CopyTo Void (ChannelBuilder, MaterialChannel) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CopyTo Void (Material, MaterialBuilder) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CopyTo Void (MaterialBuilder, Material) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CopyTo Void (MaterialChannel, ChannelBuilder) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CreateMaterial Material (ModelRoot, MaterialBuilder) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CreateMesh Mesh (ModelRoot, Func<TMaterial,Material>, IMeshBuilder<TMaterial>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CreateMesh Mesh (ModelRoot, IMeshBuilder<MaterialBuilder>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CreateMeshes IReadOnlyList<Mesh> (ModelRoot, Func<TMaterial,Material>, params IMeshBuilder[]<TMaterial>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CreateMeshes IReadOnlyList<Mesh> (ModelRoot, params IMeshBuilder[]<MaterialBuilder>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CreateVertexAccessor Accessor (ModelRoot, MemoryAccessor) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION EvaluateLines IEnumerable<ValueTuple<IVertexBuilder,IVertexBuilder,Material>> (Mesh, IGeometryTransform=null) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION EvaluateLines IEnumerable<ValueTuple<IVertexBuilder,IVertexBuilder,Material>> (MeshPrimitive, IGeometryTransform=null) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION EvaluatePoints IEnumerable<ValueTuple<IVertexBuilder,Material>> (Mesh, IGeometryTransform=null) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION EvaluatePoints IEnumerable<ValueTuple<IVertexBuilder,Material>> (MeshPrimitive, IGeometryTransform=null) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION EvaluateTriangles IEnumerable<ValueTuple<IVertexBuilder,IVertexBuilder,IVertexBuilder,Material>> (Mesh, IGeometryTransform=null) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION EvaluateTriangles IEnumerable<ValueTuple<IVertexBuilder,IVertexBuilder,IVertexBuilder,Material>> (MeshPrimitive, IGeometryTransform=null) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION EvaluateTriangles IEnumerable<ValueTuple<IVertexBuilder,IVertexBuilder,IVertexBuilder,Material>> (Node, Animation=null, Single=0) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION EvaluateTriangles IEnumerable<ValueTuple<IVertexBuilder,IVertexBuilder,IVertexBuilder,Material>> (Scene, Animation=null, Single=0) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION EvaluateTriangles IEnumerable<ValueTuple<VertexBuilder<TvG,TvM,TvS>,VertexBuilder<TvG,TvM,TvS>,VertexBuilder<TvG,TvM,TvS>,Material>> (Mesh, IGeometryTransform=null) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION EvaluateTriangles IEnumerable<ValueTuple<VertexBuilder<TvG,TvM,TvS>,VertexBuilder<TvG,TvM,TvS>,VertexBuilder<TvG,TvM,TvS>,Material>> (MeshPrimitive, IGeometryTransform=null) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION EvaluateTriangles IEnumerable<ValueTuple<VertexBuilder<TvG,TvM,VertexEmpty>,VertexBuilder<TvG,TvM,VertexEmpty>,VertexBuilder<TvG,TvM,VertexEmpty>,Material>> (Node, Animation=null, Single=0) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION EvaluateTriangles IEnumerable<ValueTuple<VertexBuilder<TvG,TvM,VertexEmpty>,VertexBuilder<TvG,TvM,VertexEmpty>,VertexBuilder<TvG,TvM,VertexEmpty>,Material>> (Scene, Animation=null, Single=0) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION FindNode Node (Node, Predicate<Node>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION FindNode Node (Scene, Predicate<Node>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION GetComputedNormals Dictionary<Vector3,Vector3> (Mesh) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION GetDiffuseColor Vector4 (Material, Vector4) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION GetDiffuseTexture Texture (Material) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION GetLineIndices IEnumerable<ValueTuple<Int32,Int32>> (MeshPrimitive) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION GetPointIndices IEnumerable<Int32> (MeshPrimitive) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION GetPrimitiveVertexSize Int32 (PrimitiveType) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION GetTriangleIndices IEnumerable<ValueTuple<Int32,Int32,Int32>> (MeshPrimitive) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION GetVertexColumns VertexBufferColumns (MeshPrimitive, IGeometryTransform=null) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION SaveAsWavefront Void (ModelRoot, String) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION SaveAsWavefront Void (ModelRoot, String, Animation, Single) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION ToMeshBuilder IMeshBuilder<MaterialBuilder> (Mesh) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION ToSceneBuilder SceneBuilder (Scene) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION ToSchema2 AlphaMode (AlphaMode) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION ToStaticMeshBuilder MeshBuilder<MaterialBuilder,TvG,TvM,VertexEmpty> (Scene, Animation, Single) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION ToStaticMeshBuilder MeshBuilder<TMaterial,TvG,TvM,VertexEmpty> (Scene, Func<Material,TMaterial>, Animation, Single) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION ToToolkit AlphaMode (AlphaMode) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION UseAnimation Animation (ModelRoot, String) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION UseImageWithContent Image (ModelRoot, Byte[]) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION UseImageWithFile Image (ModelRoot, String) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithChannelParameter Material (Material, String, Vector4) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithChannelTexture Material (Material, String, Int32, Image) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithChannelTexture Material (Material, String, Int32, String) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithColor PunctualLight (PunctualLight, Vector3, Single=1, Single=0) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithDefault Material (Material) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithDefault Material (Material, Vector4) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithDoubleSide Material (Material, Boolean) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithIndicesAccessor MeshPrimitive (MeshPrimitive, PrimitiveType, IReadOnlyList<Int32>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithIndicesAccessor MeshPrimitive (MeshPrimitive, PrimitiveType, MemoryAccessor) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithIndicesAutomatic MeshPrimitive (MeshPrimitive, PrimitiveType) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithLocalRotation Node (Node, Quaternion) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithLocalScale Node (Node, Vector3) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithLocalTransform Node (Node, AffineTransform) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithLocalTranslation Node (Node, Vector3) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithMaterial MeshPrimitive (MeshPrimitive, Material) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithMesh Node (Node, Mesh) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithOrthographicCamera Node (Node, Single, Single, Single, Single) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithPBRMetallicRoughness Material (Material) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithPBRMetallicRoughness Material (Material, Vector4, String, String=null, Single=1, Single=1) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithPBRSpecularGlossiness Material (Material) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithPerspectiveCamera Node (Node, Nullable<Single>, Single, Single, Single=∞) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithRotationAnimation Node (Node, String, ICurveSampler<Quaternion>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithRotationAnimation Node (Node, String, IReadOnlyDictionary<Single,Quaternion>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithRotationAnimation Node (Node, String, params ValueTuple[]<Single,Quaternion>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithScaleAnimation Node (Node, String, ICurveSampler<Vector3>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithScaleAnimation Node (Node, String, IReadOnlyDictionary<Single,Vector3>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithScaleAnimation Node (Node, String, params ValueTuple[]<Single,Vector3>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithSkin Node (Node, Skin) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithSkinBinding Node (Node, Matrix4x4, params Node[]) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithSkinBinding Node (Node, params ValueTuple[]<Node,Matrix4x4>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithSkinnedMesh Node (Node, Mesh, Matrix4x4, params Node[]) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithSkinnedMesh Node (Node, Mesh, params ValueTuple[]<Node,Matrix4x4>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithSpotCone PunctualLight (PunctualLight, Single, Single) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithTranslationAnimation Node (Node, String, ICurveSampler<Vector3>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithTranslationAnimation Node (Node, String, IReadOnlyDictionary<Single,Vector3>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithTranslationAnimation Node (Node, String, params ValueTuple[]<Single,Vector3>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithUnlit Material (Material) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessor MeshPrimitive (MeshPrimitive, MemoryAccessor) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessor MeshPrimitive (MeshPrimitive, String, IReadOnlyList<Single>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessor MeshPrimitive (MeshPrimitive, String, IReadOnlyList<Vector2>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessor MeshPrimitive (MeshPrimitive, String, IReadOnlyList<Vector3>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessor MeshPrimitive (MeshPrimitive, String, IReadOnlyList<Vector4>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessors MeshPrimitive (MeshPrimitive, IEnumerable<MemoryAccessor>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessors MeshPrimitive (MeshPrimitive, IReadOnlyList<TVertex>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessors MeshPrimitive (MeshPrimitive, IReadOnlyList<ValueTuple<TvP,TvM,TvS>>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessors MeshPrimitive (MeshPrimitive, IReadOnlyList<ValueTuple<TvP,TvM>>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessors MeshPrimitive (MeshPrimitive, IReadOnlyList<VertexPosition>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessors MeshPrimitive (MeshPrimitive, IReadOnlyList<VertexPositionNormal>) } }
