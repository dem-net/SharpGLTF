NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvP,TvM,TvS> { METHOD AddMesh Void (MeshBuilder<TMaterial,TvP,TvM,TvS>, Matrix4x4) } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvP,TvM,TvS> { METHOD UsePrimitive PrimitiveBuilder<TMaterial,TvP,TvM,TvS> (TMaterial) } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvP,TvM,TvS> { METHOD:CONSTRUCTOR (String=null) } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvP,TvM,TvS> { METHOD:GET Materials IReadOnlyCollection<TMaterial> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvP,TvM,TvS> { METHOD:GET Name String } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvP,TvM,TvS> { METHOD:GET Primitives IReadOnlyCollection<PrimitiveBuilder<TMaterial,TvP,TvM,TvS>> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvP,TvM,TvS> { METHOD:GET StrictMode Boolean } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvP,TvM,TvS> { METHOD:SET Name String } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvP,TvM,TvS> { METHOD:SET StrictMode Boolean } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvP,TvM,TvS> { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TMaterial,TvP,TvM,TvS> { USING IMeshBuilder<TMaterial> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvP,TvM,TvS> { METHOD:CONSTRUCTOR (String=null) } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvP,TvM,TvS> { USING IMeshBuilder<MaterialBuilder> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvP,TvM,TvS> { USING MeshBuilder<MaterialBuilder,TvP,TvM,TvS> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvP,TvM> { METHOD:CONSTRUCTOR (String=null) } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvP,TvM> { USING IMeshBuilder<MaterialBuilder> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvP,TvM> { USING MeshBuilder<MaterialBuilder,TvP,TvM,VertexEmpty> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvP> { METHOD:CONSTRUCTOR (String=null) } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvP> { USING IMeshBuilder<MaterialBuilder> } }
NS SharpGLTF.Geometry { CLASS MeshBuilder<TvP> { USING MeshBuilder<MaterialBuilder,TvP,VertexEmpty,VertexEmpty> } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD AddPolygon Void (params TvP[]) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD AddPolygon Void (params ValueTuple[]<TvP,TvM,TvS>) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD AddPolygon Void (params ValueTuple[]<TvP,TvM>) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD AddPolygon Void (params ValueTuple[]<TvP,TvS>) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD AddPrimitive Void (PrimitiveBuilder<TMaterial,TvP,TvM,TvS>, Matrix4x4) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD AddTriangle Void (TvP, TvP, TvP) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD AddTriangle Void (ValueTuple<TvP,TvM,TvS>, ValueTuple<TvP,TvM,TvS>, ValueTuple<TvP,TvM,TvS>) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD AddTriangle Void (ValueTuple<TvP,TvM>, ValueTuple<TvP,TvM>, ValueTuple<TvP,TvM>) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD AddTriangle Void (ValueTuple<TvP,TvS>, ValueTuple<TvP,TvS>, ValueTuple<TvP,TvS>) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD UseVertex Int32 (ValueTuple<TvP,TvM,TvS>) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD Validate Void () } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD:GET Mesh MeshBuilder<TMaterial,TvP,TvM,TvS> } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD:GET Vertices IReadOnlyList<ValueTuple<TvP,TvM,TvS>> } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD:GET:VIRTUAL Indices IReadOnlyList<Int32> } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD:GET:VIRTUAL Material TMaterial } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD:GET:VIRTUAL Triangles IEnumerable<ValueTuple<Int32,Int32,Int32>> } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD:GET:VIRTUAL VertexCount Int32 } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD:VIRTUAL AddTriangle Void (ValueTuple<TvPP,TvMM,TvSS>, ValueTuple<TvPP,TvMM,TvSS>, ValueTuple<TvPP,TvMM,TvSS>) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD:VIRTUAL GetVertexMaterial TvMM (Int32) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD:VIRTUAL GetVertexPosition TvPP (Int32) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { METHOD:VIRTUAL GetVertexSkinning TvSS (Int32) } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { USING IPrimitive<TMaterial> } }
NS SharpGLTF.Geometry { CLASS PrimitiveBuilder<TMaterial,TvP,TvM,TvS> { USING IPrimitiveBuilder } }
NS SharpGLTF.Geometry { INTERFACE IMeshBuilder<TMaterial> { METHOD:ABSTRACT GetPrimitive IPrimitive<TMaterial> (TMaterial) } }
NS SharpGLTF.Geometry { INTERFACE IMeshBuilder<TMaterial> { METHOD:ABSTRACT UsePrimitive IPrimitiveBuilder (TMaterial) } }
NS SharpGLTF.Geometry { INTERFACE IMeshBuilder<TMaterial> { METHOD:ABSTRACT Validate Void () } }
NS SharpGLTF.Geometry { INTERFACE IMeshBuilder<TMaterial> { METHOD:GET:ABSTRACT Materials IReadOnlyCollection<TMaterial> } }
NS SharpGLTF.Geometry { INTERFACE IMeshBuilder<TMaterial> { METHOD:GET:ABSTRACT Name String } }
NS SharpGLTF.Geometry { INTERFACE IMeshBuilder<TMaterial> { METHOD:SET:ABSTRACT Name String } }
NS SharpGLTF.Geometry { INTERFACE IPrimitive<TMaterial> { METHOD:ABSTRACT GetVertexMaterial TvMM (Int32) } }
NS SharpGLTF.Geometry { INTERFACE IPrimitive<TMaterial> { METHOD:ABSTRACT GetVertexPosition TvPP (Int32) } }
NS SharpGLTF.Geometry { INTERFACE IPrimitive<TMaterial> { METHOD:ABSTRACT GetVertexSkinning TvSS (Int32) } }
NS SharpGLTF.Geometry { INTERFACE IPrimitive<TMaterial> { METHOD:GET:ABSTRACT Indices IReadOnlyList<Int32> } }
NS SharpGLTF.Geometry { INTERFACE IPrimitive<TMaterial> { METHOD:GET:ABSTRACT Material TMaterial } }
NS SharpGLTF.Geometry { INTERFACE IPrimitive<TMaterial> { METHOD:GET:ABSTRACT Triangles IEnumerable<ValueTuple<Int32,Int32,Int32>> } }
NS SharpGLTF.Geometry { INTERFACE IPrimitive<TMaterial> { METHOD:GET:ABSTRACT VertexCount Int32 } }
NS SharpGLTF.Geometry { INTERFACE IPrimitiveBuilder { METHOD:ABSTRACT AddTriangle Void (ValueTuple<TvPP,TvMM,TvSS>, ValueTuple<TvPP,TvMM,TvSS>, ValueTuple<TvPP,TvMM,TvSS>) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD GetMaterialFragment TvM (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD GetPositionFragment TvP (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD GetSkinningFragment TvS (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD SetNormals Void (IReadOnlyDictionary<Vector3,Vector3>) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:CONSTRUCTOR () } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:GET Colors0 IList<Vector4> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:GET Colors1 IList<Vector4> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:GET Joints0 IList<Vector4> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:GET Joints1 IList<Vector4> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:GET Normals IList<Vector3> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:GET Positions IList<Vector3> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:GET Tangents IList<Vector4> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:GET Textures0 IList<Vector2> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:GET Textures1 IList<Vector2> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:GET Weights0 IList<Vector4> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:GET Weights1 IList<Vector4> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:SET Colors0 IList<Vector4> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:SET Colors1 IList<Vector4> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:SET Joints0 IList<Vector4> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:SET Joints1 IList<Vector4> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:SET Normals IList<Vector3> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:SET Positions IList<Vector3> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:SET Tangents IList<Vector4> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:SET Textures0 IList<Vector2> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:SET Textures1 IList<Vector2> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:SET Weights0 IList<Vector4> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS VertexColumns { METHOD:SET Weights1 IList<Vector4> } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexAttributeAttribute { METHOD:CONSTRUCTOR (String) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexAttributeAttribute { METHOD:CONSTRUCTOR (String, EncodingType, Boolean) } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexAttributeAttribute { METHOD:GET Encoding EncodingType } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexAttributeAttribute { METHOD:GET Name String } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexAttributeAttribute { METHOD:GET Normalized Boolean } }
NS SharpGLTF.Geometry.VertexTypes { CLASS:SEALED VertexAttributeAttribute { USING Attribute } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexMaterial { METHOD:ABSTRACT GetColor Vector4 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexMaterial { METHOD:ABSTRACT GetTexCoord Vector2 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexMaterial { METHOD:ABSTRACT SetColor Void (Int32, Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexMaterial { METHOD:ABSTRACT SetTexCoord Void (Int32, Vector2) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexMaterial { METHOD:ABSTRACT Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexMaterial { METHOD:GET:ABSTRACT MaxColors Int32 } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexMaterial { METHOD:GET:ABSTRACT MaxTextures Int32 } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexPosition { METHOD:ABSTRACT GetPosition Vector3 () } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexPosition { METHOD:ABSTRACT SetNormal Void (Vector3) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexPosition { METHOD:ABSTRACT SetPosition Void (Vector3) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexPosition { METHOD:ABSTRACT SetTangent Void (Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexPosition { METHOD:ABSTRACT Transform Void (Matrix4x4) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexPosition { METHOD:ABSTRACT TryGetNormal Boolean (out Vector3) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexPosition { METHOD:ABSTRACT TryGetTangent Boolean (out Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexPosition { METHOD:ABSTRACT Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexSkinning { METHOD:ABSTRACT GetJoint JointWeightPair (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexSkinning { METHOD:ABSTRACT SetJoint Void (Int32, Int32, Single) } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexSkinning { METHOD:ABSTRACT Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { INTERFACE IVertexSkinning { METHOD:GET:ABSTRACT MaxJoints Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT JointWeightPair { FIELD Joint Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT JointWeightPair { FIELD Weight Single } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT JointWeightPair { METHOD:CONSTRUCTOR (Int32, Single) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT JointWeightPair { METHOD:VIRTUAL CompareTo Int32 (JointWeightPair) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT JointWeightPair { USING IComparable<JointWeightPair> } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { FIELD Color Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { METHOD:CONSTRUCTOR (Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { METHOD:GET:VIRTUAL MaxColors Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { METHOD:GET:VIRTUAL MaxTextures Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { METHOD:VIRTUAL GetColor Vector4 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { METHOD:VIRTUAL GetTexCoord Vector2 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1 { USING IVertexMaterial } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { FIELD Color Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { FIELD TexCoord Vector2 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { METHOD:CONSTRUCTOR (Vector4, Vector2) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { METHOD:GET:VIRTUAL MaxColors Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { METHOD:GET:VIRTUAL MaxTextures Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { METHOD:VIRTUAL GetColor Vector4 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { METHOD:VIRTUAL GetTexCoord Vector2 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture1 { USING IVertexMaterial } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { FIELD Color Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { FIELD TexCoord0 Vector2 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { FIELD TexCoord1 Vector2 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { METHOD:CONSTRUCTOR (Vector4, Vector2, Vector2) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { METHOD:GET:VIRTUAL MaxColors Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { METHOD:GET:VIRTUAL MaxTextures Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { METHOD:VIRTUAL GetColor Vector4 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { METHOD:VIRTUAL GetTexCoord Vector2 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor1Texture2 { USING IVertexMaterial } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { FIELD Color0 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { FIELD Color1 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { FIELD TexCoord0 Vector2 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { FIELD TexCoord1 Vector2 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { METHOD:CONSTRUCTOR (Vector4, Vector4, Vector2, Vector2) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { METHOD:GET:VIRTUAL MaxColors Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { METHOD:GET:VIRTUAL MaxTextures Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { METHOD:VIRTUAL GetColor Vector4 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { METHOD:VIRTUAL GetTexCoord Vector2 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexColor2Texture2 { USING IVertexMaterial } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexEmpty { METHOD:GET:VIRTUAL MaxColors Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexEmpty { METHOD:GET:VIRTUAL MaxJoints Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexEmpty { METHOD:GET:VIRTUAL MaxTextures Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexEmpty { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexEmpty { USING IVertexMaterial } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexEmpty { USING IVertexSkinning } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { FIELD Joints Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { FIELD Weights Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { METHOD:CONSTRUCTOR (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { METHOD:CONSTRUCTOR (Int32, Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { METHOD:GET:VIRTUAL MaxJoints Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { METHOD:VIRTUAL GetJoint JointWeightPair (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { METHOD:VIRTUAL SetJoint Void (Int32, Int32, Single) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x4 { USING IVertexSkinning } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { FIELD Joints0 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { FIELD Joints1 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { FIELD Weights0 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { FIELD Weights1 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { METHOD:CONSTRUCTOR (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { METHOD:CONSTRUCTOR (Int32, Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { METHOD:GET:VIRTUAL MaxJoints Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { METHOD:VIRTUAL GetJoint JointWeightPair (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { METHOD:VIRTUAL SetJoint Void (Int32, Int32, Single) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints16x8 { USING IVertexSkinning } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { FIELD Joints Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { FIELD Weights Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { METHOD:CONSTRUCTOR (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { METHOD:CONSTRUCTOR (Int32, Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { METHOD:GET:VIRTUAL MaxJoints Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { METHOD:VIRTUAL GetJoint JointWeightPair (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { METHOD:VIRTUAL SetJoint Void (Int32, Int32, Single) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x4 { USING IVertexSkinning } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { FIELD Joints0 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { FIELD Joints1 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { FIELD Weights0 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { FIELD Weights1 Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { METHOD:CONSTRUCTOR (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { METHOD:CONSTRUCTOR (Int32, Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { METHOD:GET:VIRTUAL MaxJoints Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { METHOD:VIRTUAL GetJoint JointWeightPair (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { METHOD:VIRTUAL SetJoint Void (Int32, Int32, Single) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexJoints8x8 { USING IVertexSkinning } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { FIELD Position Vector3 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { METHOD:CONSTRUCTOR (Single, Single, Single) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { METHOD:CONSTRUCTOR (Vector3) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { METHOD:VIRTUAL GetPosition Vector3 () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { METHOD:VIRTUAL Transform Void (Matrix4x4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { METHOD:VIRTUAL TryGetNormal Boolean (out Vector3) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { METHOD:VIRTUAL TryGetTangent Boolean (out Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPosition { USING IVertexPosition } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { FIELD Normal Vector3 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { FIELD Position Vector3 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { METHOD:CONSTRUCTOR (Single, Single, Single, Single, Single, Single) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { METHOD:CONSTRUCTOR (Vector3, Vector3) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { METHOD:VIRTUAL GetPosition Vector3 () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { METHOD:VIRTUAL Transform Void (Matrix4x4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { METHOD:VIRTUAL TryGetNormal Boolean (out Vector3) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { METHOD:VIRTUAL TryGetTangent Boolean (out Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormal { USING IVertexPosition } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { FIELD Normal Vector3 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { FIELD Position Vector3 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { FIELD Tangent Vector4 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { METHOD:CONSTRUCTOR (Vector3, Vector3, Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { METHOD:VIRTUAL GetPosition Vector3 () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { METHOD:VIRTUAL Transform Void (Matrix4x4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { METHOD:VIRTUAL TryGetNormal Boolean (out Vector3) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { METHOD:VIRTUAL TryGetTangent Boolean (out Vector4) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexPositionNormalTangent { USING IVertexPosition } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { FIELD TexCoord Vector2 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { METHOD:CONSTRUCTOR (Vector2) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { METHOD:GET:VIRTUAL MaxColors Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { METHOD:GET:VIRTUAL MaxTextures Int32 } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { METHOD:VIRTUAL GetColor Vector4 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { METHOD:VIRTUAL GetTexCoord Vector2 (Int32) } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { METHOD:VIRTUAL Validate Void () } }
NS SharpGLTF.Geometry.VertexTypes { STRUCT VertexTexture1 { USING IVertexMaterial } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD RemoveTexture Void () } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD SetDefaultParameter Void () } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD UseTexture TextureBuilder () } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD:GET Key String } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD:GET Parameter Vector4 } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD:GET Texture TextureBuilder } }
NS SharpGLTF.Materials { CLASS ChannelBuilder { METHOD:SET Parameter Vector4 } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { FIELD:CONST SHADERPBRMETALLICROUGHNESS String } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { FIELD:CONST SHADERPBRSPECULARGLOSSINESS String } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { FIELD:CONST SHADERUNLIT String } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD GetChannel ChannelBuilder (KnownChannels) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD GetChannel ChannelBuilder (String) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD UseChannel ChannelBuilder (KnownChannels) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD UseChannel ChannelBuilder (String) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithAlpha MaterialBuilder (AlphaMode=OPAQUE, Single=0,5) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithChannelImage MaterialBuilder (KnownChannels, String) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithChannelImage MaterialBuilder (String, String) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithChannelParam MaterialBuilder (KnownChannels, Vector4) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithChannelParam MaterialBuilder (String, Vector4) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithDoubleSide MaterialBuilder (Boolean) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithEmissive MaterialBuilder (String) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithEmissive MaterialBuilder (String, Vector3) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithEmissive MaterialBuilder (Vector3) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithFallback MaterialBuilder (MaterialBuilder) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithMetallicRoughnessShader MaterialBuilder () } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithNormal MaterialBuilder (String, Single=1) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithOcclusion MaterialBuilder (String, Single=1) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithShader MaterialBuilder (String) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithSpecularGlossinessShader MaterialBuilder () } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD WithUnlitShader MaterialBuilder () } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:CONSTRUCTOR (String=null) } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:GET AlphaCutoff Single } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:GET AlphaMode AlphaMode } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:GET Channels IReadOnlyCollection<ChannelBuilder> } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:GET CompatibilityFallback MaterialBuilder } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:GET DoubleSided Boolean } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:GET Name String } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:GET ShaderStyle String } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:SET AlphaCutoff Single } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:SET AlphaMode AlphaMode } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:SET CompatibilityFallback MaterialBuilder } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:SET DoubleSided Boolean } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:SET Name String } }
NS SharpGLTF.Materials { CLASS MaterialBuilder { METHOD:SET ShaderStyle String } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD WithCoordinateSet TextureBuilder (Int32) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD WithImage TextureBuilder (ArraySegment<Byte>) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD WithImage TextureBuilder (String) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD WithSampler TextureBuilder (TextureMipMapFilter=LINEAR, TextureInterpolationFilter=LINEAR, TextureWrapMode=REPEAT, TextureWrapMode=REPEAT) } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:GET CoordinateSet Int32 } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:GET ImageContent ArraySegment<Byte> } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:GET MagFilter TextureInterpolationFilter } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:GET MinFilter TextureMipMapFilter } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:GET WrapS TextureWrapMode } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:GET WrapT TextureWrapMode } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:SET CoordinateSet Int32 } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:SET ImageContent ArraySegment<Byte> } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:SET MagFilter TextureInterpolationFilter } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:SET MinFilter TextureMipMapFilter } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:SET WrapS TextureWrapMode } }
NS SharpGLTF.Materials { CLASS TextureBuilder { METHOD:SET WrapT TextureWrapMode } }
NS SharpGLTF.Materials { ENUM KnownChannels { BaseColor=3 } }
NS SharpGLTF.Materials { ENUM KnownChannels { Diffuse=5 } }
NS SharpGLTF.Materials { ENUM KnownChannels { Emissive=2 } }
NS SharpGLTF.Materials { ENUM KnownChannels { MetallicRoughness=4 } }
NS SharpGLTF.Materials { ENUM KnownChannels { Normal=0 } }
NS SharpGLTF.Materials { ENUM KnownChannels { Occlusion=1 } }
NS SharpGLTF.Materials { ENUM KnownChannels { SpecularGlossiness=6 } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION AddMesh Void (MeshBuilder<TMaterial,TvP,TvM,TvS>, Mesh, Matrix4x4, Func<Material,TMaterial>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CopyChannelsTo Void (Material, MaterialBuilder, params String[]) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CopyChannelsTo Void (MaterialBuilder, Material, params String[]) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CopyTo Void (ChannelBuilder, MaterialChannel) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CopyTo Void (Material, MaterialBuilder) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CopyTo Void (MaterialBuilder, Material) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CopyTo Void (MaterialChannel, ChannelBuilder) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CreateMaterial Material (ModelRoot, MaterialBuilder) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CreateMesh Mesh (ModelRoot, Func<TMaterial,Material>, MeshBuilder<TMaterial,TvP,TvM,TvS>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CreateMesh Mesh (ModelRoot, MeshBuilder<Material,TvP,TvM,TvS>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CreateMesh Mesh (ModelRoot, MeshBuilder<MaterialBuilder,TvP,TvM,TvS>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CreateMeshes IReadOnlyList<Mesh> (ModelRoot, Func<TMaterial,Material>, params MeshBuilder[]<TMaterial,TvP,TvM,TvS>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CreateMeshes IReadOnlyList<Mesh> (ModelRoot, params MeshBuilder[]<Material,TvP,TvM,TvS>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CreateMeshes IReadOnlyList<Mesh> (ModelRoot, params MeshBuilder[]<MaterialBuilder,TvP,TvM,TvS>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION CreateVertexAccessor Accessor (ModelRoot, MemoryAccessor) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION FindNode Node (Node, Predicate<Node>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION FindNode Node (Scene, Predicate<Node>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION GetComputedNormals Dictionary<Vector3,Vector3> (Mesh) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION GetDiffuseColor Vector4 (Material, Vector4) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION GetDiffuseTexture Texture (Material) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION GetTriangleIndices IEnumerable<ValueTuple<Int32,Int32,Int32>> (MeshPrimitive) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION GetVertexColumns VertexColumns (MeshPrimitive) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION SaveAsWavefront Void (ModelRoot, String) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION Triangulate IEnumerable<ValueTuple<ValueTuple<TvP,TvM,TvS>,ValueTuple<TvP,TvM,TvS>,ValueTuple<TvP,TvM,TvS>,Material>> (Mesh, Matrix4x4) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION Triangulate IEnumerable<ValueTuple<ValueTuple<TvP,TvM,TvS>,ValueTuple<TvP,TvM,TvS>,ValueTuple<TvP,TvM,TvS>,Material>> (MeshPrimitive, Matrix4x4, IReadOnlyDictionary<Vector3,Vector3>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION Triangulate IEnumerable<ValueTuple<ValueTuple<TvP,TvM,TvS>,ValueTuple<TvP,TvM,TvS>,ValueTuple<TvP,TvM,TvS>,Material>> (Node, Boolean) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION Triangulate IEnumerable<ValueTuple<ValueTuple<TvP,TvM,TvS>,ValueTuple<TvP,TvM,TvS>,ValueTuple<TvP,TvM,TvS>,Material>> (Scene) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION UseAnimation Animation (ModelRoot, String) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION UseImageWithContent Image (ModelRoot, Byte[]) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION UseImageWithFile Image (ModelRoot, String) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithChannelParameter Material (Material, String, Vector4) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithChannelTexture Material (Material, String, Int32, Image) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithChannelTexture Material (Material, String, Int32, String) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithColor PunctualLight (PunctualLight, Vector3, Single=1, Single=0) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithDefault Material (Material) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithDefault Material (Material, Vector4) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithDoubleSide Material (Material, Boolean) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithIndicesAccessor MeshPrimitive (MeshPrimitive, PrimitiveType, IReadOnlyList<Int32>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithIndicesAccessor MeshPrimitive (MeshPrimitive, PrimitiveType, MemoryAccessor) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithIndicesAutomatic MeshPrimitive (MeshPrimitive, PrimitiveType) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithLocalRotation Node (Node, Quaternion) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithLocalScale Node (Node, Vector3) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithLocalTranslation Node (Node, Vector3) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithMaterial MeshPrimitive (MeshPrimitive, Material) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithMesh Node (Node, Mesh) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithPBRMetallicRoughness Material (Material) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithPBRMetallicRoughness Material (Material, Vector4, String, String=null, Single=1, Single=1) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithPBRSpecularGlossiness Material (Material) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithRotationAnimation Node (Node, String, IReadOnlyDictionary<Single,Quaternion>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithScaleAnimation Node (Node, String, IReadOnlyDictionary<Single,Vector3>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithSpotCone PunctualLight (PunctualLight, Single, Single) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithTranslationAnimation Node (Node, String, IReadOnlyDictionary<Single,Vector3>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithUnlit Material (Material) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessor MeshPrimitive (MeshPrimitive, MemoryAccessor) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessor MeshPrimitive (MeshPrimitive, String, IReadOnlyList<Single>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessor MeshPrimitive (MeshPrimitive, String, IReadOnlyList<Vector2>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessor MeshPrimitive (MeshPrimitive, String, IReadOnlyList<Vector3>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessor MeshPrimitive (MeshPrimitive, String, IReadOnlyList<Vector4>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessors MeshPrimitive (MeshPrimitive, IEnumerable<MemoryAccessor>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessors MeshPrimitive (MeshPrimitive, IReadOnlyList<TVertex>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessors MeshPrimitive (MeshPrimitive, IReadOnlyList<ValueTuple<TVertex,TValues,TJoints>>) } }
NS SharpGLTF.Schema2 { CLASS:STATIC Schema2Toolkit { METHOD:EXTENSION WithVertexAccessors MeshPrimitive (MeshPrimitive, IReadOnlyList<ValueTuple<TVertex,TValues>>) } }
